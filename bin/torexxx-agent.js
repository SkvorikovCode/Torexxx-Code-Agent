#!/usr/bin/env node
import fs from 'fs-extra';
import path from 'path';
import dotenv from 'dotenv';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
import inquirer from 'inquirer';
import { refinePrompt } from '../src/refine.js';
import { generateCode } from '../src/codegen.js';
import { saveProjectArtifacts } from '../src/save.js';
import { loadTemplates, applyTemplatesToSpec, logMissingTemplate, listAvailableTemplates } from '../src/templates.js';
import { 
  renderHeader, renderProgressBar, streamPrinter, 
  clearStreamPrinter, stageUpdate, renderSuccess, renderError, 
  renderInfo, renderMenu, renderTable, renderCelebration, 
  renderProjectStats, renderTips, renderHelp 
} from '../src/ui.js';
import { 
  createSpinner, 
  setSpinnerText, 
  succeedSpinner, 
  failSpinner,
  MultiStageSpinner,
  ProgressSpinner
} from '../src/loader.js';
import { listModels } from '../src/openrouter.js';
import { loadMemoryBank, matchTemplatesByText, getTemplateByName } from '../src/memorybank.js';

dotenv.config();

function parseList(val) {
  if (!val) return [];
  return String(val).split(',').map(s => s.trim()).filter(Boolean);
}

async function runWizard() {
  renderHeader(true); // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
  
  renderInfo(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Torexxx Code Agent!', 
    '–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò –∏ –≥–æ—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É.',
    'tip'
  );
  
  const avail = await listAvailableTemplates();
  const choices = avail.map(t => ({ name: `${t.name}${t.description ? ' ‚Äî ' + t.description : ''}`, value: t.name }));

  const { mode } = await inquirer.prompt([
    {
      type: 'list',
      name: 'mode',
      message: 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:',
      choices: [
        { name: 'ü§ñ –ê–≤—Ç–æ-–≤—ã–±–æ—Ä –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–¥–∞—á–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)', value: 'auto' },
        { name: 'üéõÔ∏è  –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –≤—Ä—É—á–Ω—É—é', value: 'manual' },
        { name: 'üöÄ –ë–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ (—á–∏—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)', value: 'none' },
      ],
      default: 'auto',
    }
  ]);

  const { task } = await inquirer.prompt([
    {
      type: 'input',
      name: 'task',
      message: 'üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ:',
      default: '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
      validate: (input) => {
        if (!input || input.trim().length < 5) {
          return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)';
        }
        return true;
      }
    }
  ]);

  let explicitTemplates = [];
  if (mode === 'manual' && choices.length) {
    renderMenu('–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã', choices.map(c => c.name));
    
    const sel = await inquirer.prompt([
      {
        type: 'checkbox',
        name: 'templates',
        message: 'üìã –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω—ã (–ø—Ä–æ–±–µ–ª ‚Äî –≤—ã–±—Ä–∞—Ç—å, Enter ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å):',
        choices,
        validate: (answer) => {
          if (answer.length === 0) {
            return '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "–ë–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤"';
          }
          return true;
        }
      },
      {
        type: 'input',
        name: 'extra',
        message: '‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):',
        default: '',
      }
    ]);
    explicitTemplates = [...sel.templates, ...parseList(sel.extra)];
  }

  let apiKey = process.env.OPENROUTER_API_KEY || process.env.OPENROUTER_EMBEDDED_KEY || '';
  if (!apiKey) {
    renderInfo(
      '–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á',
      '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò –Ω–µ–æ–±—Ö–æ–¥–∏–º API –∫–ª—é—á –æ—Ç OpenRouter.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–∞ https://openrouter.ai/',
      'warning'
    );
    
    const k = await inquirer.prompt([
      {
        type: 'password',
        name: 'apiKey',
        message: 'üîë –í–≤–µ–¥–∏—Ç–µ OpenRouter API Key:',
        mask: '*',
        filter: (s) => String(s || '').trim(),
        validate: (input) => {
          if (!input || input.length < 10) {
            return 'API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤';
          }
          return true;
        }
      }
    ]);
    apiKey = k.apiKey || '';
  }

  return { originalTask: task || '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç', mode, explicitTemplates, apiKey };
}

async function tryGenerateWithRecovery(specObj, { apiKey, spinner }) {
  const run = async (opts = {}) => generateCode(specObj, {
    apiKey,
    ...opts,
    onFileStart: (p) => setSpinnerText(spinner, `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞: ${p}`, 'generate')
  });

  try {
    return await run();
  } catch (err) {
    const msg = String(err?.message || err);
    console.log('\n');
    
    const is429 = /\b429\b/i.test(msg) || /rate limit/i.test(msg) || /free-models-per-day/i.test(msg);
    const isAuth = /\b401\b/i.test(msg) || /unauthorized/i.test(msg) || /invalid.*key/i.test(msg);
    const isNetwork = /network/i.test(msg) || /timeout/i.test(msg) || /ENOTFOUND/i.test(msg);

    if (is429) {
      renderError(
        '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API',
        [
          '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ OpenRouter',
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å'
        ]
      );
    } else if (isAuth) {
      renderError(
        '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API',
        [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞',
          '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ OpenRouter',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞'
        ]
      );
    } else if (isNetwork) {
      renderError(
        '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º',
        [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏/VPN'
        ]
      );
    } else {
      renderError(
        '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞',
        [
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤',
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API'
        ]
      );
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫
    if (is429) {
      const { retry } = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'retry',
          message: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥?',
          default: false,
        }
      ]);
      
      if (retry) {
        setSpinnerText(spinner, '–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...', 'loading');
        await new Promise(resolve => setTimeout(resolve, 30000));
        setSpinnerText(spinner, '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...', 'generate');
        return await run();
      }
    }

    throw err;
  }
}

async function tryRefineWithRecovery(originalTask, { apiKey, spinner }) {
  const run = async (opts = {}) => refinePrompt(originalTask, {
    apiKey,
    ...opts,
    onToken: (token) => {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∏–º-–≤—ã–≤–æ–¥ –∑–¥–µ—Å—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
  });

  try {
    return await run();
  } catch (err) {
    const msg = String(err?.message || err);
    console.log('\n');
    
    const is429 = /\b429\b/i.test(msg) || /rate limit/i.test(msg) || /free-models-per-day/i.test(msg);
    const isAuth = /\b401\b/i.test(msg) || /unauthorized/i.test(msg) || /invalid.*key/i.test(msg);

    if (is429) {
      renderError(
        '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏',
        [
          '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ OpenRouter'
        ]
      );
      
      const { useSimple } = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'useSimple',
          message: 'üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º?',
          default: true,
        }
      ]);
      
      if (useSimple) {
        return {
          title: originalTask,
          overview: `–ü—Ä–æ–µ–∫—Ç: ${originalTask}`,
          requirements: [originalTask],
          templates: [],
          template_suggestion: null
        };
      }
    } else if (isAuth) {
      renderError(
        '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–¥–∞—á–∏',
        [
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á',
          '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ'
        ]
      );
    } else {
      renderError(
        '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏',
        [
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É',
          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É'
        ]
      );
    }

    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
function calculateProjectStats(outputPath, templates, startTime) {
  try {
    const fs = require('fs-extra');
    const path = require('path');
    
    let filesCreated = 0;
    let linesOfCode = 0;
    let totalSize = 0;
    
    function countFiles(dir) {
      const items = fs.readdirSync(dir);
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
          countFiles(fullPath);
        } else if (stat.isFile()) {
          filesCreated++;
          totalSize += stat.size;
          
          // –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
          const ext = path.extname(item).toLowerCase();
          const codeExtensions = ['.js', '.jsx', '.ts', '.tsx', '.vue', '.py', '.go', '.html', '.css', '.scss', '.json', '.md'];
          
          if (codeExtensions.includes(ext)) {
            try {
              const content = fs.readFileSync(fullPath, 'utf8');
              linesOfCode += content.split('\n').length;
            } catch (e) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            }
          }
        }
      }
    }
    
    if (fs.existsSync(outputPath)) {
      countFiles(outputPath);
    }
    
    return {
      filesCreated,
      linesOfCode,
      templates: templates.map(t => t.name || t),
      duration: Date.now() - startTime,
      size: totalSize
    };
  } catch (error) {
    return {
      filesCreated: 0,
      linesOfCode: 0,
      templates: templates.map(t => t.name || t),
      duration: Date.now() - startTime,
      size: 0
    };
  }
}

async function main() {
  const startTime = Date.now();
  
  const argv = yargs(hideBin(process.argv))
    .option('prompt', { type: 'string', describe: '–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é', demandOption: false })
    .option('templates', { type: 'string', describe: '–Ø–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', default: '' })
    .option('out', { type: 'string', describe: '–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞', default: 'Torexxx-Agent/output' })
    .help().argv;

  let originalTask = argv.prompt;
  let explicitTemplates = parseList(argv.templates || process.env.AGENT_TEMPLATES);
  let apiKey = process.env.OPENROUTER_API_KEY || process.env.OPENROUTER_EMBEDDED_KEY || '';
  let mode = 'cli';

  if (!originalTask) {
    const w = await runWizard();
    originalTask = w.originalTask;
    explicitTemplates = w.explicitTemplates;
    apiKey = w.apiKey;
    mode = w.mode;
  } else {
    renderHeader(); // –°—Ç–∞—Ç–∏—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è CLI —Ä–µ–∂–∏–º–∞
  }

  // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
  const stages = [
    '–ê–Ω–∞–ª–∏–∑ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏',
    '–ü–æ–¥–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤',
    '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏',
    '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞',
    '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞'
  ];
  
  const multiSpinner = new MultiStageSpinner(stages);
  multiSpinner.start();

  try {
    // 1) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ–π—Ä–æ–Ω–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã)
    setSpinnerText(multiSpinner.spinner, '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à—É –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò...', 'ai');
    const spec = await tryRefineWithRecovery(originalTask, { apiKey, spinner: multiSpinner.spinner });
    multiSpinner.nextStage();

    // 2) –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    setSpinnerText(multiSpinner.spinner, '–ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã...', 'search');
    const modelTemplates = Array.isArray(spec.templates) ? spec.templates : [];
    const effectiveTemplates = (mode === 'manual')
      ? explicitTemplates
      : (mode === 'none')
        ? []
        : (modelTemplates.length ? modelTemplates : explicitTemplates);
    
    // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –∞–≤—Ç–æ-–≤—ã–±–æ—Ä web_landing_plain –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ª–µ–Ω–¥–∏–Ω–≥–∞
    const looksLikeLanding = (t) => {
      const s = String(t || '').toLowerCase();
      return /–ª–µ–Ω–¥–∏–Ω–≥|landing|landing page|landing-page|homepage|–ø—Ä–æ–º–æ|–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–π—Ç|–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞/i.test(s);
    };
    const wantLanding = looksLikeLanding(originalTask) || looksLikeLanding(spec?.title) || looksLikeLanding(spec?.overview);
    if (mode === 'auto' && wantLanding && !effectiveTemplates.includes('web_landing_plain')) {
      effectiveTemplates.push('web_landing_plain');
      console.log('\nüéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω web_landing_plain –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞');
    }

    // –ü–æ–¥–±–æ—Ä –ø–æ MemoryBank: –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º
    if (mode === 'auto') {
      const memory = await loadMemoryBank();
      const text = `${originalTask}\n${spec?.title || ''}\n${spec?.overview || ''}`;
      const candidates = matchTemplatesByText(text, memory);
      for (const c of candidates) {
        const name = c.name;
        if (!effectiveTemplates.includes(name)) {
          effectiveTemplates.push(name);
          console.log(`\nüîç MemoryBank: –¥–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω ${name} –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ç–µ–≥–æ–≤`);
        }
      }
    }

    multiSpinner.nextStage();

    // 3) –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã; –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
    setSpinnerText(multiSpinner.spinner, '–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã...', 'template');
    const loaded = await loadTemplates(effectiveTemplates);
    const loadedNames = new Set(loaded.map(t => t.name));
    let missing = effectiveTemplates.filter(n => !loadedNames.has(n));

    // –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ YAML-—à–∞–±–ª–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ MemoryBank
    if (missing.length) {
      const memory = await loadMemoryBank();
      const looksLikePath = (s) => /[\\\/.]/.test(String(s || ''));
      for (const miss of [...missing]) {
        const memT = getTemplateByName(memory, miss);
        if (memT) {
          const data = {
            description: memT.description || '',
            rules: Array.isArray(memT.rules) ? memT.rules : [],
            style: Array.isArray(memT.style) ? memT.style : [],
            stack: Array.isArray(memT.stack) ? memT.stack : [],
            // structure –∏–∑ MemoryBank –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ–∫—Ü–∏—è–º–∏; –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –ø—É—Ç–∏
            structure: (Array.isArray(memT.structure) ? memT.structure.filter(looksLikePath) : []),
          };
          loaded.push({ name: miss, filePath: 'MemoryBank', data });
          loadedNames.add(miss);
          console.log(`\nüìã –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ MemoryBank –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "${miss}"`);
        }
      }
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å–ª–µ —Ñ–æ–ª–±—ç–∫–∞
      missing = effectiveTemplates.filter(n => !loadedNames.has(n));
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
    for (const miss of missing) {
      await logMissingTemplate(miss, spec, originalTask);
      console.log(`\n‚ö†Ô∏è  –®–∞–±–ª–æ–Ω "${miss}" –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω –≤ requests.jsonl`);
    }

    multiSpinner.nextStage();

    if (loaded.length) {
      const specWithTemplates = applyTemplatesToSpec(spec, loaded);
      console.log(`\n‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —à–∞–±–ª–æ–Ω—ã: ${loaded.map(t => t.name).join(', ')}`);
      
      setSpinnerText(multiSpinner.spinner, '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞...', 'generate');
      const rawOutput = await tryGenerateWithRecovery(specWithTemplates, { apiKey, spinner: multiSpinner.spinner });
      
      multiSpinner.nextStage();
      setSpinnerText(multiSpinner.spinner, '–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞...', 'save');
      const projPath = await saveProjectArtifacts(originalTask, specWithTemplates, rawOutput);
      
      multiSpinner.complete('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = calculateProjectStats(projPath, loaded, startTime);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ
      renderCelebration(
        '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!',
        [
          `–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${stats.filesCreated}`,
          `–°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${stats.linesOfCode.toLocaleString()}`,
          `–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${Math.round(stats.duration / 1000)}—Å`,
          `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${projPath}`
        ]
      );
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      renderProjectStats(stats);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
      const tips = [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ README.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∑–∞–ø—É—Å–∫—É',
        '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π npm install –∏–ª–∏ pip install -r requirements.txt',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ git init –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è',
        '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
      ];
      
      renderTips(tips.slice(0, 3));
    } else {
      // –ë–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º; —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–µ
      if (mode === 'auto' && spec.template_suggestion && !explicitTemplates.length) {
        await logMissingTemplate(spec.template_suggestion, spec, originalTask);
        console.log(`\nüí° –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω "${spec.template_suggestion}" ‚Äî –∑–∞–ø–∏—Å–∞–Ω –≤ requests.jsonl`);
      }
      
      setSpinnerText(multiSpinner.spinner, '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤...', 'generate');
      const rawOutput = await tryGenerateWithRecovery(spec, { apiKey, spinner: multiSpinner.spinner });
      
      multiSpinner.nextStage();
      setSpinnerText(multiSpinner.spinner, '–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞...', 'save');
      const projPath = await saveProjectArtifacts(originalTask, spec, rawOutput);
      
      multiSpinner.complete('–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤!');
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = calculateProjectStats(projPath, [], startTime);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ
      renderCelebration(
        '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤!',
        [
          `–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${stats.filesCreated}`,
          `–°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${stats.linesOfCode.toLocaleString()}`,
          `–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${Math.round(stats.duration / 1000)}—Å`,
          `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${projPath}`
        ]
      );
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      renderProjectStats(stats);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤
      const tips = [
        '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é —á–∏—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò',
        '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å README.md —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞',
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã',
        '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –≤ –±—É–¥—É—â–µ–º'
      ];
      
      renderTips(tips.slice(0, 3));
    }
  } catch (err) {
    multiSpinner.fail('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
    
    renderError(
      '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç',
      [
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
        '–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏'
      ]
    );
    
    console.error('\nüîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', err.message);
    process.exit(1);
  }
}

main().catch(err => {
  console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});