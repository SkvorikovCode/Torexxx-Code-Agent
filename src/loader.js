import ora from 'ora';
import cliSpinners from 'cli-spinners';
import chalk from 'chalk';
import gradient from 'gradient-string';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ø–∏–Ω–Ω–µ—Ä—ã —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
const customSpinners = {
  torexxx: {
    interval: 120,
    frames: [
      'üöÄ –ó–∞–ø—É—Å–∫...',
      '‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞...',
      'üî• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...',
      '‚ú® –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è...',
      'üéØ –ì–æ—Ç–æ–≤–æ!'
    ]
  },
  rainbow: {
    interval: 100,
    frames: [
      'üî¥ ‚óè‚óã‚óã‚óã‚óã‚óã‚óã',
      'üü† ‚óã‚óè‚óã‚óã‚óã‚óã‚óã',
      'üü° ‚óã‚óã‚óè‚óã‚óã‚óã‚óã',
      'üü¢ ‚óã‚óã‚óã‚óè‚óã‚óã‚óã',
      'üîµ ‚óã‚óã‚óã‚óã‚óè‚óã‚óã',
      'üü£ ‚óã‚óã‚óã‚óã‚óã‚óè‚óã',
      'üü§ ‚óã‚óã‚óã‚óã‚óã‚óã‚óè'
    ]
  },
  code: {
    interval: 150,
    frames: [
      'üìù –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞...',
      'üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤...',
      '‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞...',
      'üõ†Ô∏è  –°–±–æ—Ä–∫–∞...',
      'üì¶ –£–ø–∞–∫–æ–≤–∫–∞...',
      '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!'
    ]
  },
  ai: {
    interval: 200,
    frames: [
      'ü§ñ –î—É–º–∞—é...',
      'üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...',
      'üí≠ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏...',
      '‚ö° –°–æ–∑–¥–∞—é –∫–æ–¥...',
      'üé® –û—Ñ–æ—Ä–º–ª—è—é...',
      'üöÄ –ì–æ—Ç–æ–≤–æ!'
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ASCII –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
function isAsciiPreferred() {
  return process.env.TERM === 'dumb' || 
         process.env.CI === 'true' || 
         process.platform === 'win32';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–∏–Ω–Ω–µ—Ä–∞
function resolveSpinner(spinnerName = 'torexxx') {
  if (isAsciiPreferred()) {
    return cliSpinners.line;
  }
  
  return customSpinners[spinnerName] || customSpinners.torexxx;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞
export function createSpinner(text = '–ó–∞–≥—Ä—É–∑–∫–∞...', spinnerType = 'torexxx') {
  const spinner = resolveSpinner(spinnerType);
  
  return ora({
    text: chalk.cyan(text),
    spinner: spinner,
    color: 'cyan',
    hideCursor: true,
    indent: 2
  });
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export function setSpinnerText(spinner, text, type = 'info') {
  if (!spinner) return;
  
  const icons = {
    info: 'üîÑ',
    success: '‚úÖ',
    warning: '‚ö†Ô∏è',
    error: '‚ùå',
    loading: '‚è≥',
    search: 'üîç',
    generate: '‚ö°',
    save: 'üíæ',
    template: 'üìã',
    ai: 'ü§ñ'
  };
  
  const colors = {
    info: chalk.cyan,
    success: chalk.green,
    warning: chalk.yellow,
    error: chalk.red,
    loading: chalk.blue,
    search: chalk.magenta,
    generate: chalk.yellow,
    save: chalk.green,
    template: chalk.blue,
    ai: chalk.magenta
  };
  
  const icon = icons[type] || icons.info;
  const color = colors[type] || colors.info;
  
  spinner.text = `${icon} ${color(text)}`;
}

// –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
export function succeedSpinner(spinner, text = '–ì–æ—Ç–æ–≤–æ!') {
  if (!spinner) return;
  
  const successText = `‚ú® ${chalk.green.bold(text)}`;
  spinner.succeed(successText);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∏–º–∞—Ü–∏—é —É—Å–ø–µ—Ö–∞
  setTimeout(() => {
    console.log(chalk.green('  üéâ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'));
  }, 100);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
export function failSpinner(spinner, text = '–û—à–∏–±–∫–∞!', suggestions = []) {
  if (!spinner) return;
  
  const errorText = `üí• ${chalk.red.bold(text)}`;
  spinner.fail(errorText);
  
  if (suggestions.length > 0) {
    console.log(chalk.yellow('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:'));
    suggestions.forEach(suggestion => {
      console.log(chalk.gray(`  ‚Ä¢ ${suggestion}`));
    });
  }
}

// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
export function warnSpinner(spinner, text = '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!') {
  if (!spinner) return;
  
  const warnText = `‚ö†Ô∏è  ${chalk.yellow.bold(text)}`;
  spinner.warn(warnText);
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
export function infoSpinner(spinner, text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
  if (!spinner) return;
  
  const infoText = `üí° ${chalk.blue.bold(text)}`;
  spinner.info(infoText);
}

// –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
export class MultiStageSpinner {
  constructor(stages = []) {
    this.stages = stages;
    this.currentStage = 0;
    this.spinner = null;
  }
  
  start() {
    if (this.stages.length === 0) return;
    
    this.spinner = createSpinner(this.stages[0], 'ai');
    this.spinner.start();
  }
  
  nextStage(customText = null) {
    if (!this.spinner) return;
    
    this.currentStage++;
    
    if (this.currentStage < this.stages.length) {
      const text = customText || this.stages[this.currentStage];
      setSpinnerText(this.spinner, text, 'generate');
    }
  }
  
  complete(successText = '–í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!') {
    if (this.spinner) {
      succeedSpinner(this.spinner, successText);
    }
  }
  
  fail(errorText = '–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', suggestions = []) {
    if (this.spinner) {
      failSpinner(this.spinner, errorText, suggestions);
    }
  }
}

// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–ø–∏–Ω–Ω–µ—Ä
export class ProgressSpinner {
  constructor(total, text = '–û–±—Ä–∞–±–æ—Ç–∫–∞') {
    this.total = total;
    this.current = 0;
    this.text = text;
    this.spinner = null;
  }
  
  start() {
    this.spinner = createSpinner(this.getProgressText(), 'rainbow');
    this.spinner.start();
  }
  
  increment(step = 1) {
    this.current = Math.min(this.current + step, this.total);
    if (this.spinner) {
      setSpinnerText(this.spinner, this.getProgressText(), 'loading');
    }
  }
  
  getProgressText() {
    const percentage = Math.round((this.current / this.total) * 100);
    const progressBar = this.createProgressBar();
    return `${this.text} ${progressBar} ${percentage}% (${this.current}/${this.total})`;
  }
  
  createProgressBar() {
    const width = 20;
    const filled = Math.round((this.current / this.total) * width);
    const empty = width - filled;
    
    return chalk.green('‚ñà'.repeat(filled)) + chalk.gray('‚ñë'.repeat(empty));
  }
  
  complete(successText = null) {
    this.current = this.total;
    const text = successText || `${this.text} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`;
    if (this.spinner) {
      succeedSpinner(this.spinner, text);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { createSpinner as createLoader };
export { setSpinnerText as setLoaderText };
export { succeedSpinner as succeedLoader };
export { failSpinner as failLoader };